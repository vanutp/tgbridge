// Generated by codegen/generate_config.py. Do not modify
package dev.vanutp.tgbridge.common.models

import com.charleskorn.kaml.YamlComment
import kotlinx.serialization.Serializable

@Serializable
data class Config(
    @YamlComment(
        "It's enough to set botToken and chatId for the plugin to work.",
        "When your group has topics enabled, you should also set topicId.",
        "See https://tgbridge.vanutp.dev for more information.",
    )
    val general: GeneralConfig = GeneralConfig(),
    val messages: MessagesConfig = MessagesConfig(),
    val integrations: IntegrationsConfig = IntegrationsConfig(),
    val events: EventsConfig = EventsConfig(),
    val advanced: AdvancedConfig = AdvancedConfig(),
    @YamlComment(
        "Config file version. Don't change manually",
    )
    val version: Int = 1,
)

@Serializable
data class GeneralConfig(
    val botToken: String = "your bot token",
    val chatId: Long = 0,
    val topicId: Int? = null,
)

@Serializable
data class MessagesConfig(
    @YamlComment(
        "::: warning",
        "Don't enable this if you have a chat plugin installed.",
        "See [Compatibility](https://tgbridge.vanutp.dev/en/compatibility#chat) for more info",
        ":::",
        "If this value is set, messages without specified prefix won't be forwarded to Telegram.",
        "Example: \"!\" (quotes are required)",
        "Default value: null (disabled)",
    )
    val requirePrefixInMinecraft: String? = null,
    @YamlComment(
        "Set to `true` to keep the prefix specified in the above setting in the message",
    )
    val keepPrefix: Boolean = false,
    @YamlComment(
        "Chat messages sent within the specified interval will be merged in one.",
        "The value is specified in seconds",
        "Default value: 0 (disabled)",
    )
    val mergeWindow: Int = 0,
    @YamlComment(
        "Set to `true` to use real player username instead of display name in all Telegram messages",
    )
    val useRealUsername: Boolean = false,
)

@Serializable
data class IntegrationsConfig(
    @YamlComment(
        "If this value is set, waypoints shared from Xaero's Minimap/World Map will be rendered",
        "as links to a specified BlueMap instance.",
        "Example: https://map.example.com",
        "Default value: null (disabled)",
    )
    val bluemapUrl: String? = null,
    @YamlComment(
        "The chat name to forward messages from.",
        "Only has an effect when a compatible chat plugin with support for named chats, such as Chatty, is installed.",
        "(see [Compatibility](https://tgbridge.vanutp.dev/en/compatibility#chat))",
    )
    val globalChatName: String = "global",
    @YamlComment(
        "See also: [Compatibility](https://tgbridge.vanutp.dev/en/compatibility#chat)",
        "Use this if you have an incompatible plugin, such as CMI or AdvancedChat installed.",
        "Will register a legacy chat listener with LOWEST priority (HIGHEST on Forge/NeoForge)",
        "and only forward messages that start with the specified string.",
        "Currently this only has an effect on Paper and Forge/NeoForge.",
        "Example: \"!\" (quotes are required)",
        "Default value: null (disabled)",
    )
    val incompatiblePluginChatPrefix: String? = null,
)

@Serializable
data class EventsConfig(
    val advancementMessages: EventsAdvancementMessagesConfig = EventsAdvancementMessagesConfig(),
    val enableDeathMessages: Boolean = true,
    val enableJoinMessages: Boolean = true,
    val enableLeaveMessages: Boolean = true,
    @YamlComment(
        "If a player leaves and then joins within the specified time interval,",
        "the leave and join messages will be deleted.",
        "This is useful when players frequently re-join, for example because of connection problems.",
        "Only has effect when both enableJoinMessages and enableLeaveMessages are set to true.",
        "The value is specified in seconds",
        "Default value: 0 (disabled)",
    )
    val leaveJoinMergeWindow: Int = 0,
    @YamlComment(
        "Whether to send a Telegram message when the server starts",
    )
    val enableStartMessages: Boolean = true,
    @YamlComment(
        "Whether to send a Telegram message when the server stops",
    )
    val enableStopMessages: Boolean = true,
)

@Serializable
data class EventsAdvancementMessagesConfig(
    val enable: Boolean = true,
    @YamlComment(
        "Configure forwarding of each advancement type",
    )
    val enableTask: Boolean = true,
    @YamlComment(
        "Configure forwarding of each advancement type",
    )
    val enableGoal: Boolean = true,
    @YamlComment(
        "Configure forwarding of each advancement type",
    )
    val enableChallenge: Boolean = true,
    @YamlComment(
        "Include advancement descriptions in Telegram messages",
    )
    val showDescription: Boolean = true,
)

@Serializable
data class AdvancedConfig(
    val botApiUrl: String = "https://api.telegram.org",
    val connectionRetry: AdvancedConnectionRetryConfig = AdvancedConnectionRetryConfig(),
)

@Serializable
data class AdvancedConnectionRetryConfig(
    @YamlComment(
        "Max amount of connection retries. If the value is less than 1 the number of attempts is infinite",
    )
    val maxAttempts: Int = 10,
    @YamlComment(
        "Delay before first reconnect attempt in milliseconds",
    )
    val initialDelay: Long = 1000,
    @YamlComment(
        "Maximum delay between reconnection attempts in milliseconds",
    )
    val maxDelay: Long = 300000,
)
